/**
 * OpenAPI definition
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { InformativeMessage } from '../model/informativeMessage';
import { Item } from '../model/item';
import { ItemCreateRequest } from '../model/itemCreateRequest';
import { ItemCreateResponse } from '../model/itemCreateResponse';
import { ItemSearchRequest } from '../model/itemSearchRequest';
import { ItemSearchResponse } from '../model/itemSearchResponse';
import { ItemSellRequest } from '../model/itemSellRequest';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class ItemsService {

    protected basePath = 'http://185.98.136.60:9090';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * 
     * 
     * @param itemId 
     * @param teamId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public buy(itemId: number, teamId: number, observe?: 'body', reportProgress?: boolean): Observable<InformativeMessage>;
    public buy(itemId: number, teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InformativeMessage>>;
    public buy(itemId: number, teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InformativeMessage>>;
    public buy(itemId: number, teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling buy.');
        }

        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling buy.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InformativeMessage>('post',`${this.basePath}/items/buy/${encodeURIComponent(String(itemId))}/${encodeURIComponent(String(teamId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public create2(body: ItemCreateRequest, observe?: 'body', reportProgress?: boolean): Observable<ItemCreateResponse>;
    public create2(body: ItemCreateRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ItemCreateResponse>>;
    public create2(body: ItemCreateRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ItemCreateResponse>>;
    public create2(body: ItemCreateRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling create2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ItemCreateResponse>('post',`${this.basePath}/items`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createMultiple(body: Array<ItemCreateRequest>, observe?: 'body', reportProgress?: boolean): Observable<Array<ItemCreateResponse>>;
    public createMultiple(body: Array<ItemCreateRequest>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemCreateResponse>>>;
    public createMultiple(body: Array<ItemCreateRequest>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemCreateResponse>>>;
    public createMultiple(body: Array<ItemCreateRequest>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createMultiple.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<ItemCreateResponse>>('post',`${this.basePath}/items/collection`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllItems(observe?: 'body', reportProgress?: boolean): Observable<Array<Item>>;
    public getAllItems(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Item>>>;
    public getAllItems(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Item>>>;
    public getAllItems(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Item>>('get',`${this.basePath}/items`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param itemId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getById2(itemId: number, observe?: 'body', reportProgress?: boolean): Observable<Item>;
    public getById2(itemId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Item>>;
    public getById2(itemId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Item>>;
    public getById2(itemId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (itemId === null || itemId === undefined) {
            throw new Error('Required parameter itemId was null or undefined when calling getById2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Item>('get',`${this.basePath}/items/${encodeURIComponent(String(itemId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public search(body: ItemSearchRequest, observe?: 'body', reportProgress?: boolean): Observable<Array<ItemSearchResponse>>;
    public search(body: ItemSearchRequest, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ItemSearchResponse>>>;
    public search(body: ItemSearchRequest, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ItemSearchResponse>>>;
    public search(body: ItemSearchRequest, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling search.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<ItemSearchResponse>>('post',`${this.basePath}/items/search`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param teamId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sellToMarketplace(body: ItemSellRequest, teamId: number, observe?: 'body', reportProgress?: boolean): Observable<InformativeMessage>;
    public sellToMarketplace(body: ItemSellRequest, teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InformativeMessage>>;
    public sellToMarketplace(body: ItemSellRequest, teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InformativeMessage>>;
    public sellToMarketplace(body: ItemSellRequest, teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sellToMarketplace.');
        }

        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling sellToMarketplace.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InformativeMessage>('post',`${this.basePath}/items/sell/${encodeURIComponent(String(teamId))}/marketplace`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * 
     * @param body 
     * @param teamId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public sellToTeams(body: ItemSellRequest, teamId: number, observe?: 'body', reportProgress?: boolean): Observable<InformativeMessage>;
    public sellToTeams(body: ItemSellRequest, teamId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InformativeMessage>>;
    public sellToTeams(body: ItemSellRequest, teamId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InformativeMessage>>;
    public sellToTeams(body: ItemSellRequest, teamId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling sellToTeams.');
        }

        if (teamId === null || teamId === undefined) {
            throw new Error('Required parameter teamId was null or undefined when calling sellToTeams.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InformativeMessage>('post',`${this.basePath}/items/sell/${encodeURIComponent(String(teamId))}/teams`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
